# spell-checker: disable
# yamllint disable
<%
require 'open3'
require 'json'
report_dir = ENV['REPORT_DIR'] || 'test/reports'
report_ts = ENV['REPORT_TS'] || Time.now.strftime('%Y-%m-%d-%H-%M-%S')
tf_output, rc = Open3.capture2('terraform -chdir=test/setup output -json')
if rc != 0
  abort 'Failed to capture Terraform output from test/setup'
end
harness_outputs = JSON.parse(tf_output, { symbolize_names: true }).map { |k,v| [k, v[:value]] }.to_h

def hash_to_input_var(params)
  "{#{params.map do |k, v|
        case v
        when nil
          "\\\"#{k.to_s}\\\"=null"
        when Hash
          "\\\"#{k.to_s}\\\"=#{hash_to_input_var(v)}"
        when Array
          "\\\"#{k.to_s}\\\"=[#{v.map do |e|
               case e
               when nil
                "null"
               when Hash
                 hash_to_input_var(e)
               when String
                 "\\\"#{e}\\\""
               else
                 "#{e}"
               end
             end.join(',')}]"
        when String
          "\\\"#{k.to_s}\\\"=\\\"#{v}\\\""
        else
          "\\\"#{k.to_s}\\\"=#{v}"
        end
      end.join(',')}}"
end

prefix = harness_outputs[:prefix]

harness_inside_outside_global_networks = {
  :inside => {
    :name => harness_outputs[:inside_global],
    :namespace => 'system',
    :tenant => nil
  },
  :outside => {
    :name => harness_outputs[:outside_global],
    :namespace => 'system',
    :tenant => nil
  },
  :forward_proxy => nil
}

harness_inside_only_global_networks = {
  :inside => {
    :name => harness_outputs[:inside_global],
    :namespace => 'system',
    :tenant => nil,
    :forward_proxy => nil
  },
  :outside => nil
}

harness_outside_only_global_networks = {
  :inside => nil,
  :outside => {
    :name => harness_outputs[:outside_global],
    :namespace => 'system',
    :tenant => nil,
    :forward_proxy => nil
  }
}
%>
---
driver:
  name: terraform
  verify_version: true
  variables:
    subnets: '<%= hash_to_input_var({:inside => harness_outputs[:inside_self_link], :outside => harness_outputs[:outside_self_link]}) %>'
    cloud_credential_name: <%= harness_outputs[:cloud_credential_name] %>
    labels: '<%= hash_to_input_var(harness_outputs[:labels]) %>'
    annotations: '<%= hash_to_input_var(harness_outputs[:annotations]) %>'
    ssh_key: '<%= harness_outputs[:ssh_pubkey] %>'

transport:
  name: terraform
  command_timeout: 1800

provisioner:
  name: terraform

verifier:
  name: terraform
  color: true

platforms:
  - name: root-min
    transport:
      root_module_directory: test/fixtures/root
    driver:
      variables:
        name: <%= "#{prefix}-root-min" %>
        description: Minimal GCP Site declaration
  - name: root-vm-options
    transport:
      root_module_directory: test/fixtures/root
    driver:
      variables:
        name: <%= "#{prefix}-root-vmopts" %>
        description: Overriding VM options
        vm_options: '<%= hash_to_input_var(:disk_size => 100, :instance_type => 'n1-standard-8', :os_version => '9.2024.6', :sw_version => 'crt-20240326-2726', :zones => harness_outputs[:zones][0, 1]) %>'
  - name: root-both-global
    transport:
      root_module_directory: test/fixtures/root
    driver:
      variables:
        name: <%= "#{prefix}-root-both-global" %>
        description: Setting inside and outside networks to corresponding global networks
        global_networks: '<%= hash_to_input_var(harness_inside_outside_global_networks) %>'
  - name: root-inside-global
    transport:
      root_module_directory: test/fixtures/root
    driver:
      variables:
        name: <%= "#{prefix}-root-inside-global" %>
        description: Setting inside network to corresponding global network
        global_networks: '<%= hash_to_input_var(harness_inside_only_global_networks) %>'
  - name: root-outside-global
    transport:
      root_module_directory: test/fixtures/root
    driver:
      variables:
        name: <%= "#{prefix}-root-outside-global" %>
        description: Setting outside network to corresponding global network
        global_networks: '<%= hash_to_input_var(harness_outside_only_global_networks) %>'
  # GCP VPC site does not support simple static routes on inside
  # - name: root-simple-route-inside
  #   transport:
  #     root_module_directory: test/fixtures/root
  #   driver:
  #     variables:
  #       name: <%= "#{prefix}-root-sroute-in" %>
  #       description: Add a simple static route to inside network
  #       static_routes: '<%= hash_to_input_var({:inside => {:simple => ['10.0.0.0/8'], :custom => nil}, :outside => nil}) %>'
  - name: root-simple-route-outside
    transport:
      root_module_directory: test/fixtures/root
    driver:
      variables:
        name: <%= "#{prefix}-root-sroute-out" %>
        description: Add a simple static route to outside network
        static_routes: '<%= hash_to_input_var({:outside => {:simple => ['10.0.0.0/8'], :custom => nil}, :inside => nil}) %>'
  - name: root-custom-route-inside-defgw
    transport:
      root_module_directory: test/fixtures/root
    driver:
      variables:
        name: <%= "#{prefix}-root-croute-in" %>
        description: Add a custom static route to inside network
        static_routes: '<%= hash_to_input_var({:outside => nil, :inside => {:custom => [{:type => 'NEXT_HOP_DEFAULT_GATEWAY', :attrs => ['ROUTE_ATTR_NO_OP'], :labels => nil, :interface => nil, :address => nil, :subnets => ["10.0.0.0/8"]}]}}) %>'
  - name: root-custom-route-outside-defgw
    transport:
      root_module_directory: test/fixtures/root
    driver:
      variables:
        name: <%= "#{prefix}-root-croute-out" %>
        description: Add a custom static route to outside network
        static_routes: '<%= hash_to_input_var({:inside => nil, :outside => {:simple => nil, :custom => [{:type => 'NEXT_HOP_DEFAULT_GATEWAY', :attrs => ['ROUTE_ATTR_NO_OP'], :labels => nil, :interface => nil, :address => nil, :subnets => ["10.0.0.0/8"]}]}}) %>'

suites:
  - name: gcp-vpc
    verifier:
      name: terraform
      systems:
        - name: gcp
          backend: gcp
          attrs:
            - test/setup/harness.yml
          profile_locations:
            - test/profiles/gcp
        - name: local
          backend: local
          attrs:
            - test/setup/harness.yml
          profile_locations:
            - test/profiles/f5xc
